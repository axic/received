#!/usr/bin/env ruby
require 'rubygems'
require 'daemons'
require 'logger'
require 'etc'
#require File.dirname(__FILE__) + '/../lib/received'
$:<< File.expand_path('../../lib', __FILE__)
require 'received'

options = {}
OptionParser.new do |opts|
  opts.banner = 'Usage: received [options]'
  opts.on('-b', '--backend BACKEND', [:mongodb], 'Backend (mongodb)') {|v| options[:backend] = v}
  opts.on('-d', '--daemonize', 'Become a daemon') {|v| options[:daemon] = v}
  opts.on('-s', '--unix-socket /path/to/socket', 'Use UNIX socket') {|v| options[:unix_socket] = v}
  opts.on('-p', '--port NUM', 'Listen to TCP port') {|v| options[:port] = v.to_i}
  opts.on('-h', '--host NAME', 'Bind to this IP (default: 127.0.0.1)') {|v| options[:host] = v}
  opts.on('-l', '--log FILE', 'Log file name') {|v| options[:logfile] = v}
#  opts.on('-f', '--pidfile FILE', 'PID file name') {|v| options[:pidfile] = v}
  opts.on('-c', '--config FILE', 'Config file name') {|v| options[:config] = v}
  opts.on('-v', '--verbose', 'Verbose logging') {options[:level] = Logger::DEBUG}
end.parse!

raise "Config file is required, please provide with -c config.yml" unless options[:config]

# Default backend
options[:backend] ||= 'mongodb'

options[:logger] = Logger.new(options[:logfile] || $stderr).tap do |logger|
  logger.level = options[:level] || Logger::INFO
end

if options.delete(:daemon)
  params = {:backtrace => true, :dir_mode => :system, }
  # Drop privileges if started as superuser
  params.merge!({:user => 'nobody', :group => 'nobody'}) if Process.uid == 0
  Daemons.daemonize(params)
end

server = Received::Server.new(options)
%w(TERM INT).each do |sig|
  Signal.trap(sig) {server.stop}
end
server.serve!
